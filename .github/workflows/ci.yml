name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    types:
      - checks_requested

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Lint files
        run: yarn lint

      - name: Typecheck files
        run: yarn typecheck

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Run unit tests
        run: yarn test --maxWorkers=2 --coverage

  build-library:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build package
        run: yarn prepare

  build-android:
    runs-on: ubuntu-latest
    env:
      TURBO_CACHE_DIR: .turbo/android
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean Android build artifacts
        run: |
          cd example
          rm -rf android/app/build
          rm -rf android/build
          rm -rf android/.gradle
          rm -rf ~/.gradle/caches
          ./android/gradlew clean -p android || true

      - name: Setup
        uses: ./.github/actions/setup

      - name: Cache turborepo for Android
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-android-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-android-

      - name: Check turborepo cache for Android
        run: |
          TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:android').cache.status")

          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Install JDK
        if: env.turbo_cache_hit != 1
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Finalize Android SDK
        if: env.turbo_cache_hit != 1
        run: |
          /bin/bash -c "yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null"

      - name: Cache Gradle
        if: env.turbo_cache_hit != 1
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('example/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build example for Android
        env:
          JAVA_OPTS: "-XX:MaxHeapSize=6g"
        run: |
          yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}"

  build-ios:
    runs-on: self-hosted
    env:
      TURBO_CACHE_DIR: .turbo/ios
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby environment for runner
        run: |
          # Reset Ruby environment to prevent architecture conflicts
          if command -v rbenv &> /dev/null; then
            rbenv rehash
          fi
          # Ensure we're using the system Ruby or correct architecture
          ruby --version
          gem --version
          # Clear bundler config that might cause issues
          bundle config --delete build.json || true
          bundle config --delete force_ruby_platform || true
          # Set bundler to use system gems path
          bundle config --local path vendor/bundle
          
      - name: Clean iOS build artifacts and Ruby gems
        run: |
          cd example
          # Clean Ruby vendor bundle to prevent architecture conflicts
          rm -rf vendor/bundle
          rm -rf .bundle
          # Clean iOS build artifacts
          rm -rf ios/build
          rm -rf ios/Pods
          rm -rf ios/Podfile.lock
          # Clean Xcode derived data
          rm -rf ~/Library/Developer/Xcode/DerivedData
          # Clean gem cache and reinstall for correct architecture
          gem cleanup || true
          # Force reinstall gems with correct architecture for runner
          bundle config --local force_ruby_platform true
          bundle config --local build.json --with-cppflags=-I$(brew --prefix)/include
          # Clear any cached gems that might have wrong architecture
          rm -rf ~/.gem
          gem pristine --all || true

      - name: Setup
        uses: ./.github/actions/setup

      - name: Install cocoapods
        run: |
          cd example
          bundle install
          bundle exec pod install --project-directory=ios

      - name: Build example for iOS
        run: |
          yarn turbo run build:ios --force
